name: Complete Basic CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:     
        
  secret-scanning:
    name: Gitleaks — Secret Scaning 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Run Gitleaks (JSON)
        run: |
          mkdir -p gitleaks-out
          docker run --rm \
            -v "$PWD:/repo" \
            -v "$PWD/gitleaks-out:/out" \
            zricethezav/gitleaks:latest \
            detect \
              --source /repo \
              --no-git \
              --no-color --no-banner --redact \
              --report-format json \
              --report-path /out/gitleaks.json \
              --exit-code 0
          echo "Saved report to gitleaks-out/gitleaks.json"
  
      - name: Upload JSON report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-json-${{ github.run_id }}
          path: gitleaks-out/gitleaks.json
          if-no-files-found: error

  sast-scan:
    name: CodeQL - SAST Analysis
    needs: secret-scanning
    if: ${{ always() && github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-extended,security-and-quality
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
  SCA-scan:
    needs :  sast-scan  
    if : always()
    name: OSV Scanner - SCA
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v2.2.2"
    permissions:
      actions: read
      security-events: write
      contents: read
    with:
      scan-args: |-
        --recursive
        ./
      upload-sarif: true
      fail-on-vuln: false


#  JOB BUILD IMAGE - Construction de l'image Docker
  build-image:
    needs : SCA-scan
    if : always()
    name:  Build - Docker Image Construction
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      actions: read
    
    # Outputs pour les jobs suivants et SLSA
    outputs:
      image_name: ${{ steps.normalize.outputs.image_fqn }}
      digest: ${{ steps.build.outputs.digest }}
      image_uri: ${{ steps.normalize.outputs.image_fqn }}@${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}
      tags_json: ${{ steps.meta.outputs.json }}
      
    steps:
      # 1. Récupération du code source
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Normalize image name
        id: normalize
        run: |
          raw="${{ env.IMAGE_NAME }}"
          norm="$(echo "$raw" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9._\/-]/-/g' | sed -E 's/_/-/g')"
          echo "image_repo=$norm" >> $GITHUB_OUTPUT
          echo "image_fqn=${{ env.REGISTRY }}/$norm" >> $GITHUB_OUTPUT
          echo "Using image: ${{ env.REGISTRY }}/$norm"
      
      # Authentification au GitHub Container Registry
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      #  Configuration des métadonnées avec SHA prioritaire
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.normalize.outputs.image_fqn }}
          tags: |
            # SHA en priorité pour immutabilité et sécurité
            type=sha,prefix={{branch}}-,format=long,priority=1000
            type=sha,prefix={{branch}}-,format=short,priority=900
            # Tags traditionnels pour développement
            type=ref,event=branch,priority=600
            type=ref,event=pr,priority=600
            type=raw,value=latest,enable={{is_default_branch}},priority=200
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            # 🔒 Configuration pour image privée
            org.opencontainers.image.visibility=private
  
      #  Build Docker image SEULEMENT (sans push)
      - name: Build Docker image locally
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false  # ✅ Pas de push dans ce job
          load: true   # ✅ Charge l'image localement pour le scan suivant
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    
      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: spdx-json
          artifact-name: sbom-${{ github.run_id }}.spdx.json
      #  Sauvegarde de l'image pour le job suivant
      - name: Save Docker image as artifact
        run: |
          echo "💾 Sauvegarde de l'image pour le job de scan..."
          # Sauvegarder la première tag comme référence
          FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          docker save "$FIRST_TAG" | gzip > docker-image.tar.gz
          echo "✅ Image sauvegardée: docker-image.tar.gz"
      
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.run_id }}
          path: docker-image.tar.gz
          retention-days: 1
  
      #  Affichage des informations de build
      - name: Display build information
        run: |
          echo "🎉 === BUILD TERMINÉ AVEC SUCCÈS ==="
          echo ""
          echo "📦 Nom de l'image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🔑 Digest (temporaire): ${{ steps.build.outputs.digest }}"
          echo ""
          echo "🏷️ Tags préparés:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | while read tag; do echo "  - $tag"; done
          echo ""
          echo "➡️  Image prête pour scan de sécurité..."
  

  #  JOB SCAN - Scanner de sécurité des containers
  container-scan:
    name: Trivy - Container Security Analysis  
    runs-on: ubuntu-latest
    needs: build-image
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    # Outputs pour le job push
    outputs:
      scan_status: ${{ steps.scan-status.outputs.status }}
      critical_count: ${{ steps.scan-status.outputs.critical }}
      high_count: ${{ steps.scan-status.outputs.high }}
      
    steps:
      #  Récupération du code (pour contexte)
      - name: Checkout repository
        uses: actions/checkout@v4
      
      #  Téléchargement de l'image construite
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ github.run_id }}
      
      #  Chargement de l'image Docker
      - name: Load Docker image
        run: |
          echo "📥 Chargement de l'image Docker..."
          docker load < docker-image.tar.gz
          echo "✅ Image chargée avec succès"
          docker images
      
      # Scanner Trivy sur l'image
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(needs.build-image.outputs.tags_json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: 0  # Continue même si vulnérabilités
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
      
      #  Upload des résultats vers GitHub Security
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
        continue-on-error: true 
  
      #  Analyse des résultats et création du statut
      - name: Analyze scan results
        id: scan-status
        run: |
          if [ -f trivy-results.sarif ]; then
            CRITICAL_COUNT=$(jq '[.runs[0].results[] | select(.level == "error")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.runs[0].results[] | select(.level == "warning")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            
            echo "🔍 === RÉSULTATS DU SCAN DE SÉCURITÉ ==="
            echo "Critical vulnerabilities: $CRITICAL_COUNT"
            echo "High vulnerabilities: $HIGH_COUNT"
            
            # Outputs pour le job suivant
            echo "critical=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
            echo "high=$HIGH_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$CRITICAL_COUNT" -gt "0" ]; then
              echo "status=critical_found" >> $GITHUB_OUTPUT
              echo "❌ Critical vulnerabilities found! Review before production deployment."
            else
              echo "status=safe" >> $GITHUB_OUTPUT
              echo "✅ No critical vulnerabilities found."
            fi
          else
            echo "status=scan_failed" >> $GITHUB_OUTPUT
            echo "⚠️ No scan results file found."
          fi
  
  # JOB PUSH - Publication de l'image Docker  
  push-image:
    name: Push - Docker Image Publication
    runs-on: ubuntu-latest
    needs: [build-image, container-scan]
    
    permissions:
      contents: read
      packages: write
      actions: read
    
    # Outputs finaux pour SLSA (reprend ceux du build)
    outputs:
      image_name: ${{ needs.build-image.outputs.image_name }}
      digest: ${{ steps.push.outputs.digest }}  # Digest réel après push
      image_uri: ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}
      tags: ${{ needs.build-image.outputs.tags }}
      
    steps:
      #  Récupération du code source
      - name: Checkout repository
        uses: actions/checkout@v4
      
      #  Authentification au GitHub Container Registry
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      #  Affichage du statut de scan
      - name: Display security scan status
        run: |
          echo "🔍 === STATUT DU SCAN DE SÉCURITÉ ==="
          echo "Statut: ${{ needs.container-scan.outputs.scan_status }}"
          echo "Vulnérabilités critiques: ${{ needs.container-scan.outputs.critical_count }}"
          echo "Vulnérabilités élevées: ${{ needs.container-scan.outputs.high_count }}"
          
          if [ "${{ needs.container-scan.outputs.scan_status }}" = "critical_found" ]; then
            echo "⚠️  Des vulnérabilités critiques ont été trouvées!"
            echo "📋 Consultez l'onglet Security > Code scanning pour les détails"
            # Décommentez la ligne suivante pour bloquer le push si vulnérabilités critiques
            # exit 1
          fi
      
      #  Reconstruction et Push (nécessaire pour obtenir le vrai digest)
      - name: Extract metadata (for push)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-,format=long,priority=1000
            type=sha,prefix={{branch}}-,format=short,priority=900
            type=ref,event=branch,priority=600
            type=ref,event=pr,priority=600
            type=raw,value=latest,enable={{is_default_branch}},priority=200
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.visibility=private
      
      #  Build final et Push pour obtenir le digest définitif
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true  # ✅ Push final
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
      #  Configuration de l'image comme privée
      - name: Set image visibility to private
        run: |
          echo "🔒 Configuration de l'image comme privée..."
          echo "Image sera automatiquement configurée comme privée"
      
      #  Affichage des informations finales
      - name: Display complete build information
        run: |
          echo "🎉 === PIPELINE TERMINÉ AVEC SUCCÈS ==="
          echo ""
          echo "📦 Nom de l'image: ${{ needs.build-image.outputs.image_name }}"
          echo "🔑 SHA Digest FINAL: ${{ steps.push.outputs.digest }}"
          echo "🎯 URI complète (immutable): ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}"
          echo ""
          echo "🏷️ Tags disponibles:"
          echo "${{ needs.build-image.outputs.tags }}" | tr ',' '\n' | while read tag; do echo "  - $tag"; done
          echo ""
          echo "🔒 Visibilité: Image privée (authentification requise)"
          echo "⚡ Recommandation: Utilisez le SHA digest pour la production"
          echo ""
          echo "🔍 Sécurité: ${{ needs.container-scan.outputs.critical_count }} critical, ${{ needs.container-scan.outputs.high_count }} high vulnerabilities"
          echo ""
          echo "📋 Commandes utiles:"
          echo "  - Pull: docker pull ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}"
          echo "  - Inspect: docker inspect ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}"
  attest:
    name: Generate SLSA Provenance
    needs: push-image # Dépend du job de build et de push
    runs-on: ubuntu-latest
    permissions:
      attestations: write # Requis pour enregistrer l'attestation
      id-token: write      # Requis pour la signature sans clé via OIDC
      contents: read
      packages: write  
      
    steps:
    
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify image exists
        run: |
          echo "🔍 Vérification de l'existence de l'image..."
          echo "Image: ${{ needs.push-image.outputs.image_name }}"
          echo "Digest: ${{ needs.push-image.outputs.digest }}"
          
          # Vérifier le manifest
          docker manifest inspect "${{ needs.push-image.outputs.image_name }}@${{ needs.push-image.outputs.digest }}" || {
            echo "❌ Image non trouvée avec ce digest !"
            echo "📋 Images disponibles :"
            docker images --filter "reference=${{ needs.push-image.outputs.image_name }}"
            exit 1
          }
          echo "✅ Image trouvée et accessible"
      
      #  NOUVEAU: Attendre que l'image soit complètement disponible
      - name: Wait for image availability
        run: |
          echo "⏳ Attente de la disponibilité complète de l'image..."
          for i in {1..30}; do
            if docker manifest inspect "${{ needs.push-image.outputs.image_name }}@${{ needs.push-image.outputs.digest }}" >/dev/null 2>&1; then
              echo "✅ Image disponible après ${i} tentatives"
              break
            fi
            echo "⏳ Tentative $i/30..."
            sleep 10
          done
        
      - name: Generate SLSA Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ needs.push-image.outputs.image_name }}
          subject-digest: ${{ needs.push-image.outputs.digest }}
          push-to-registry: true
 
  IaC-Scan:
    needs: push-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run KICS
        uses: checkmarx/kics-github-action@v2.1.13
        with:
          path: '.'
          output_formats: 'sarif'
          output_path: 'results/'
          ignore_on_exit: 'results'
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/results.sarif


